// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ring_keys.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lidar_localization/models/scan_context_manager/ring_keys.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace scan_context_io {

namespace {

const ::google::protobuf::Descriptor* RingKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RingKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* RingKeys_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RingKeys_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ring_5fkeys_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ring_5fkeys_2eproto() {
  protobuf_AddDesc_ring_5fkeys_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ring_keys.proto");
  GOOGLE_CHECK(file != NULL);
  RingKey_descriptor_ = file->message_type(0);
  static const int RingKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingKey, data_),
  };
  RingKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RingKey_descriptor_,
      RingKey::default_instance_,
      RingKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingKey, _has_bits_[0]),
      -1,
      -1,
      sizeof(RingKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingKey, _internal_metadata_),
      -1);
  RingKeys_descriptor_ = file->message_type(1);
  static const int RingKeys_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingKeys, data_),
  };
  RingKeys_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RingKeys_descriptor_,
      RingKeys::default_instance_,
      RingKeys_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingKeys, _has_bits_[0]),
      -1,
      -1,
      sizeof(RingKeys),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingKeys, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ring_5fkeys_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RingKey_descriptor_, &RingKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RingKeys_descriptor_, &RingKeys::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ring_5fkeys_2eproto() {
  delete RingKey::default_instance_;
  delete RingKey_reflection_;
  delete RingKeys::default_instance_;
  delete RingKeys_reflection_;
}

void protobuf_AddDesc_ring_5fkeys_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ring_5fkeys_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ring_keys.proto\022\017scan_context_io\"\027\n\007Ri"
    "ngKey\022\014\n\004data\030\001 \003(\002\"2\n\010RingKeys\022&\n\004data\030"
    "\001 \003(\0132\030.scan_context_io.RingKey", 111);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ring_keys.proto", &protobuf_RegisterTypes);
  RingKey::default_instance_ = new RingKey();
  RingKeys::default_instance_ = new RingKeys();
  RingKey::default_instance_->InitAsDefaultInstance();
  RingKeys::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ring_5fkeys_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ring_5fkeys_2eproto {
  StaticDescriptorInitializer_ring_5fkeys_2eproto() {
    protobuf_AddDesc_ring_5fkeys_2eproto();
  }
} static_descriptor_initializer_ring_5fkeys_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RingKey::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RingKey::RingKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scan_context_io.RingKey)
}

void RingKey::InitAsDefaultInstance() {
}

RingKey::RingKey(const RingKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scan_context_io.RingKey)
}

void RingKey::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RingKey::~RingKey() {
  // @@protoc_insertion_point(destructor:scan_context_io.RingKey)
  SharedDtor();
}

void RingKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RingKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RingKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RingKey_descriptor_;
}

const RingKey& RingKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ring_5fkeys_2eproto();
  return *default_instance_;
}

RingKey* RingKey::default_instance_ = NULL;

RingKey* RingKey::New(::google::protobuf::Arena* arena) const {
  RingKey* n = new RingKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RingKey::Clear() {
// @@protoc_insertion_point(message_clear_start:scan_context_io.RingKey)
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RingKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scan_context_io.RingKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float data = 1;
      case 1: {
        if (tag == 13) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_data())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scan_context_io.RingKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scan_context_io.RingKey)
  return false;
#undef DO_
}

void RingKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scan_context_io.RingKey)
  // repeated float data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scan_context_io.RingKey)
}

::google::protobuf::uint8* RingKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scan_context_io.RingKey)
  // repeated float data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scan_context_io.RingKey)
  return target;
}

int RingKey::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:scan_context_io.RingKey)
  int total_size = 0;

  // repeated float data = 1;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RingKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scan_context_io.RingKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RingKey* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RingKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scan_context_io.RingKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scan_context_io.RingKey)
    MergeFrom(*source);
  }
}

void RingKey::MergeFrom(const RingKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scan_context_io.RingKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RingKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scan_context_io.RingKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RingKey::CopyFrom(const RingKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scan_context_io.RingKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RingKey::IsInitialized() const {

  return true;
}

void RingKey::Swap(RingKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RingKey::InternalSwap(RingKey* other) {
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RingKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RingKey_descriptor_;
  metadata.reflection = RingKey_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RingKey

// repeated float data = 1;
int RingKey::data_size() const {
  return data_.size();
}
void RingKey::clear_data() {
  data_.Clear();
}
 float RingKey::data(int index) const {
  // @@protoc_insertion_point(field_get:scan_context_io.RingKey.data)
  return data_.Get(index);
}
 void RingKey::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:scan_context_io.RingKey.data)
}
 void RingKey::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:scan_context_io.RingKey.data)
}
 const ::google::protobuf::RepeatedField< float >&
RingKey::data() const {
  // @@protoc_insertion_point(field_list:scan_context_io.RingKey.data)
  return data_;
}
 ::google::protobuf::RepeatedField< float >*
RingKey::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:scan_context_io.RingKey.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RingKeys::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RingKeys::RingKeys()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scan_context_io.RingKeys)
}

void RingKeys::InitAsDefaultInstance() {
}

RingKeys::RingKeys(const RingKeys& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scan_context_io.RingKeys)
}

void RingKeys::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RingKeys::~RingKeys() {
  // @@protoc_insertion_point(destructor:scan_context_io.RingKeys)
  SharedDtor();
}

void RingKeys::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RingKeys::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RingKeys::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RingKeys_descriptor_;
}

const RingKeys& RingKeys::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ring_5fkeys_2eproto();
  return *default_instance_;
}

RingKeys* RingKeys::default_instance_ = NULL;

RingKeys* RingKeys::New(::google::protobuf::Arena* arena) const {
  RingKeys* n = new RingKeys;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RingKeys::Clear() {
// @@protoc_insertion_point(message_clear_start:scan_context_io.RingKeys)
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RingKeys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scan_context_io.RingKeys)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .scan_context_io.RingKey data = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scan_context_io.RingKeys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scan_context_io.RingKeys)
  return false;
#undef DO_
}

void RingKeys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scan_context_io.RingKeys)
  // repeated .scan_context_io.RingKey data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scan_context_io.RingKeys)
}

::google::protobuf::uint8* RingKeys::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scan_context_io.RingKeys)
  // repeated .scan_context_io.RingKey data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scan_context_io.RingKeys)
  return target;
}

int RingKeys::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:scan_context_io.RingKeys)
  int total_size = 0;

  // repeated .scan_context_io.RingKey data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RingKeys::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scan_context_io.RingKeys)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RingKeys* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RingKeys>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scan_context_io.RingKeys)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scan_context_io.RingKeys)
    MergeFrom(*source);
  }
}

void RingKeys::MergeFrom(const RingKeys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scan_context_io.RingKeys)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RingKeys::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scan_context_io.RingKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RingKeys::CopyFrom(const RingKeys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scan_context_io.RingKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RingKeys::IsInitialized() const {

  return true;
}

void RingKeys::Swap(RingKeys* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RingKeys::InternalSwap(RingKeys* other) {
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RingKeys::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RingKeys_descriptor_;
  metadata.reflection = RingKeys_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RingKeys

// repeated .scan_context_io.RingKey data = 1;
int RingKeys::data_size() const {
  return data_.size();
}
void RingKeys::clear_data() {
  data_.Clear();
}
const ::scan_context_io::RingKey& RingKeys::data(int index) const {
  // @@protoc_insertion_point(field_get:scan_context_io.RingKeys.data)
  return data_.Get(index);
}
::scan_context_io::RingKey* RingKeys::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:scan_context_io.RingKeys.data)
  return data_.Mutable(index);
}
::scan_context_io::RingKey* RingKeys::add_data() {
  // @@protoc_insertion_point(field_add:scan_context_io.RingKeys.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::scan_context_io::RingKey >*
RingKeys::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:scan_context_io.RingKeys.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::scan_context_io::RingKey >&
RingKeys::data() const {
  // @@protoc_insertion_point(field_list:scan_context_io.RingKeys.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace scan_context_io

// @@protoc_insertion_point(global_scope)
